Use "npm init" to create a package.json file. 

Use "npm install express" to install express to your project.

The above command adds Express to the project.
Observed changes:
    |=> Express is added as a dependency in the package.json file.
    |=> A package -lock.json file is created.
    |=> A new folder named node_modules will be created which contains all the modules required for the project.

JSON => JavaScript Object Notation.
    |=> JSON is a lightweight format for storing and transporting data.
    |=> JSON is often used when data is sent from a server to a web page.
    |=> JSON is "self-describing" and easy to understand.

package.json:
    |=> The package.json file is the heart of Node.js system. 
    |=> It is the manifest file of any Node.js project and contains the metadata of the project. 
    |=> The package.json file is the essential part to understand, learn and work with the Node.js. 
    |=> It is the first step to learn about development in Node.js. 


What does package.json file consist of? 
    The metadata information in package.json file can be categorized into below categories: 
        1. Identifying metadata properties:
            It basically consist of the properties to identify the module/project such as the name of the project, 
            current version of the module, license, author of the project, description about the project etc. 
            
        2. Functional metadata properties: 
            As the name suggests, it consists of the functional values/properties of the project/module such as 
            the entry/starting point of the module, dependencies in project, scripts being used, repository links of Node project etc.

Explanation: 
    * name: The name of the application/project. 
    * version: The version of application. The version should follow semantic versioning rules. 
    * description: The description about the application, purpose of the application, technology used like React, MongoDB, etc. 
    * main: This is the entry/starting point of the app. It specifies the main file of the application that triggers when the application starts. Application can be started using npm start. 
    * scripts: The scripts which needs to be included in the application to run properly. 
    * engines: The versions of the node and npm used. These versions are specified in case the application is deployed on cloud like heroku or google-cloud. 
    * keywords: It specifies the array of strings that characterizes the application. 
    * author: It consist of the information about the author like name, email and other author related information. 
    * license: The license to which the application confirms are mentioned in this key-value pair. 
    * dependencies: The third party package or modules installed using npm are specified in this segment. 
    * devDependencies: The dependencies that are used only in the development part of the application are specified in this segment. These dependencies do not get rolled out when the application is in production stage. 
    * repository: It contain the information about the type and url of the repository where the code of the application lives is mentioned here in this segment. 
    * bugs: The url and email where the bugs in the application should be reported are mentioned in this segment. 


In Node.js, package.json is a versioning file used to install multiple packages in your project. 
As you initialize your node application, you will see three files installed in your app that is:
node_modules, package.json, and package.lock.json.

Why package.lock.json is necessary when you have package.json in your project application?
    package.lock.json is created for locking the dependency with the installed version. 
    It will install the exact latest version of that package in your application and save it in package.json. 
    Let’s say if the current version of the package is 1.3.2 then it will save the version with (^) sign. 
    Here carot(^) means, it will support any higher version with major version 1 for eg. 1.2.2. 

    Without package.lock.json, there might be some differences in installed versions in different environments. 
    To overcome this problem, package.lock.json is created to have the same results in every environment. 
    It should be in source control with the package.json file because if any other user will clone the project 
    and install dependencies then it will install the exact same dependencies as in package.lock.json to avoid differences.


What's Express?
    Express is a small framework that sits on top of Node.js’s web server functionality to simplify its APIs 
    and add helpful new features.It makes it easier to organize your application’s functionality with middle ware and routing; 
    it adds helpful utilities to Node.js’s HTTP objects;it facilitates the rendering of dynamic HTTP objects.